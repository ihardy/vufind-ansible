---
- name: install apache2
  apt:
    name: apache2
    update_cache: yes
    cache_valid_time: 3600
  become: yes

- name: enable apache mod rewrite
  apache2_module:
    state: present
    name: rewrite
  become: yes

- name: install mysql
  apt:
    name: "{{ packages }}"
    update_cache: yes
    cache_valid_time: 3600
  vars:
    packages:
    - mysql-server
    - python3-mysqldb
  become: yes

- name: Set MySQL root password for localhost, 127.0.0.1, ::1
  mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    host: "{{ item }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
  with_items:
    - localhost
    - 127.0.0.1
    - ::1
  become: yes

- name: add my.cnf file
  template:
    src: my.cnf.j2
    dest: /root/.my.cnf
    owner: root
    mode: 0600
  become: yes

- name: restart mysql server
  systemd:
    state: restarted
    name: mysql
  become: yes

- name: remove test db
  mysql_db:
    name: test
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: remove anonymous accounts
  mysql_user:
    name: ''
    host_all: yes
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: try to check if vufind user and db have been created
  shell:
    cmd: mysql -e 'DESCRIBE {{ vufind_db }}.record;' | grep record_id
  become: yes
  register: check_db
  failed_when: check_db == 2

- name: make vufind db and user sql creation script from template
  template:
    src: dbsetup.sql.j2
    dest: /root/dbsetup.sql
  become: yes
  when: check_db.rc != 0

- name: vufind database must exist
  mysql_db:
    name: "{{ vufind_db }}"
    state: present
    encoding: utf8
    config_file: /root/.my.cnf
  become: yes
  when: check_db.rc != 0

- name: vufind database user must exist and have privs
  mysql_user:
    name: "{{ vufind_db_user }}"
    password: "{{ vufind_db_pass }}"
    priv: "{{ vufind_db }}.*:SELECT,INSERT,UPDATE,DELETE"
    config_file: /root/.my.cnf  
  become: yes
  when: check_db.rc != 0

- name: run vufind db and user creation script
  mysql_db: 
    state: import
    target: /root/dbsetup.sql
    config_file: /root/.my.cnf
    name: vufind
  become: yes
  when: check_db.rc != 0

- name: cleanup vufind db and user creation script
  file:
    path: /root/dbsetup.sql
    state: absent
  become: yes
  when: check_db.rc != 0

- name: install php requirements
  apt:
    name: "{{ packages }}"
    update_cache: yes
    cache_valid_time: 3600
  vars:
    packages:
    - libapache2-mod-php
    - php-mbstring
    - php-pear
    - php
    - php-dev
    - php-gd
    - php-intl
    - php-json
    - php-mysql
    - php-xml
    - php-soap
  become: yes

- name: install java requirements
  apt:
    name: "{{ packages }}"
    update_cache: yes
    cache_valid_time: 3600
  vars:
    packages:
    - openjdk-8-jdk
  become: yes

- name: download vufind
  get_url:
    url: https://github.com/vufind-org/vufind/releases/download/v{{ vufind_version }}/vufind-{{ vufind_version }}.tar.gz
    dest: /tmp/vufind-{{ vufind_version }}.tar.gz

- name: create vufind directory
  file:
    path: /usr/local/vufind
    state: directory
  become: yes

- name: extract vufind
  unarchive:
    remote_src: yes
    src: /tmp/vufind-{{ vufind_version }}.tar.gz
    dest: /usr/local/vufind/
    extra_opts: [--strip-components=1]
    creates: /usr/local/vufind/install.php
  become: yes


- name: install vufind and accept default prompts
  shell: 'echo "\n\n\n" | /usr/bin/php install.php'
  args:
    chdir: /usr/local/vufind
    creates: /usr/local/vufind/local/httpd-vufind.conf
  become: true

- name: restrict Admin and Install locations
  blockinfile:
    path: /usr/local/vufind/local/httpd-vufind.conf
    block: |
      <LocationMatch "^/vufind/Admin">
        Require all denied
      </LocationMatch>
      <LocationMatch "^/vufind/Install">
        Require all denied
      </LocationMatch>  
  become: yes

- name: link vufind config to apache configs
  file:
    src: /usr/local/vufind/local/httpd-vufind.conf
    dest: /etc/apache2/conf-enabled/vufind.conf
    state: link
  become: yes

- name: clobber default apache vhost
  template:
    src: 000-default.conf.j2
    dest: /etc/apache2/sites-available/000-default.conf
    owner: root
    group: root
    mode: 0644
  become: yes

- name: restart apache
  systemd:
    state: restarted
    name: apache2
  become: yes

- name: add vufind config file
  template:
    src: config.ini.j2
    dest: /usr/local/vufind/local/config/vufind/config.ini
    variable_start_string: '<%'
    variable_end_string: '%>'
    mode: 0644
  become: yes
  

- name: add vufind environment file
  template:
    src: vufind.sh.j2
    dest: /etc/profile.d/vufind.sh
    owner: root
    mode: 0644
  become: yes

- name: add vufind user
  user:
    name: vufind
    shell: /bin/sh
  become: true

- name: set permissions on vufind installation dir
  file:
    path: /usr/local/vufind
    owner: vufind
    group: vufind
    recurse: yes
  become: yes

- name: allow www-data access to cache 
  file:
    path: /usr/local/vufind/local/cache/
    owner: www-data
    group: www-data
    recurse: yes
  become: yes

- name: add vufind service unit file
  template:
    src: vufind.service.j2
    dest: /etc/systemd/system/vufind.service
    owner: root
    mode: 0644
  become: yes

- name: enable vufind service
  systemd:
    name: vufind
    enabled: yes
    masked: no
    daemon_reload: yes
  become: yes

- name: start vufind
  systemd:
    name: vufind
    state: restarted
  become: yes

- name: create vufind directory
  file:
    path: /var/vufind
    owner: vufind
    group: vufind
    state: directory
  become: yes
  when: vufind_load_sample_data == true

- name: fetch sample data
  get_url:
    url: "{{ item }}"
    dest: "/var/vufind/sample-{{ idx }}.mrc"
    owner: vufind
    group: vufind
    mode: 0644
  with_items: "{{ sample_data_urls }}"
  loop_control:
    index_var: idx
  become: yes
  when: vufind_load_sample_data == true

- name: check if sample data has alreday been indexed
  uri:
    url: "{{ sample_data_known_solr_query }}"
  register: known_record_response
  when: vufind_load_sample_data == true

- name: index sample data
  shell: 
    cmd: "./import-marc.sh /var/vufind/sample-{{ idx }}.mrc"
    chdir: /usr/local/vufind/
  with_items: "{{ sample_data_urls }}"
  loop_control:
    index_var: idx
  become: yes
  when: vufind_load_sample_data == true and known_record_response.json.response.numFound != 1
